// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.grammatech.gtirb.proto.SymbolicExpression

@SerialVersionUID(0L)
final case class SymbolicExpression(
    value: com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.Empty,
    attributeFlags: _root_.scala.Seq[com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SymbolicExpression] {
    private[this] def attributeFlagsSerializedSize = {
      if (__attributeFlagsSerializedSizeField == 0) __attributeFlagsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        attributeFlags.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(__i.value))
        __s
      }
      __attributeFlagsSerializedSizeField
    }
    @transient private[this] var __attributeFlagsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (value.addrConst.isDefined) {
        val __value = value.addrConst.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.addrAddr.isDefined) {
        val __value = value.addrAddr.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (attributeFlags.nonEmpty) {
        val __localsize = attributeFlagsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      value.addrConst.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.addrAddr.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (attributeFlags.nonEmpty) {
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(attributeFlagsSerializedSize)
        attributeFlags.foreach((_output__.writeEnumNoTag _).compose((_: com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag).value))
      };
      unknownFields.writeTo(_output__)
    }
    def getAddrConst: com.grammatech.gtirb.proto.SymbolicExpression.SymAddrConst = value.addrConst.getOrElse(com.grammatech.gtirb.proto.SymbolicExpression.SymAddrConst.defaultInstance)
    def withAddrConst(__v: com.grammatech.gtirb.proto.SymbolicExpression.SymAddrConst): SymbolicExpression = copy(value = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.AddrConst(__v))
    def getAddrAddr: com.grammatech.gtirb.proto.SymbolicExpression.SymAddrAddr = value.addrAddr.getOrElse(com.grammatech.gtirb.proto.SymbolicExpression.SymAddrAddr.defaultInstance)
    def withAddrAddr(__v: com.grammatech.gtirb.proto.SymbolicExpression.SymAddrAddr): SymbolicExpression = copy(value = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.AddrAddr(__v))
    def clearAttributeFlags = copy(attributeFlags = _root_.scala.Seq.empty)
    def addAttributeFlags(__vs: com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag *): SymbolicExpression = addAllAttributeFlags(__vs)
    def addAllAttributeFlags(__vs: Iterable[com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag]): SymbolicExpression = copy(attributeFlags = attributeFlags ++ __vs)
    def withAttributeFlags(__v: _root_.scala.Seq[com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag]): SymbolicExpression = copy(attributeFlags = __v)
    def clearValue: SymbolicExpression = copy(value = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.Empty)
    def withValue(__v: com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value): SymbolicExpression = copy(value = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => value.addrConst.orNull
        case 3 => value.addrAddr.orNull
        case 4 => attributeFlags.iterator.map(_.javaValueDescriptor).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => value.addrConst.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => value.addrAddr.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(attributeFlags.iterator.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.type = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression
    // @@protoc_insertion_point(GeneratedMessage[gtirb.proto.SymbolicExpression])
}

object SymbolicExpression extends scalapb.GeneratedMessageCompanion[com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression = {
    val __attributeFlags: _root_.scala.collection.immutable.VectorBuilder[com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag] = new _root_.scala.collection.immutable.VectorBuilder[com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag]
    var __value: com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 18 =>
          __value = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.AddrConst(__value.addrConst.fold(_root_.scalapb.LiteParser.readMessage[com.grammatech.gtirb.proto.SymbolicExpression.SymAddrConst](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __value = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.AddrAddr(__value.addrAddr.fold(_root_.scalapb.LiteParser.readMessage[com.grammatech.gtirb.proto.SymbolicExpression.SymAddrAddr](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 32 =>
          __attributeFlags += com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag.fromValue(_input__.readEnum())
        case 34 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __attributeFlags += com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag.fromValue(_input__.readEnum())
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression(
        attributeFlags = __attributeFlags.result(),
        value = __value,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression(
        attributeFlags = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scalapb.descriptors.EnumValueDescriptor]]).getOrElse(_root_.scala.Seq.empty).iterator.map(__e => com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag.fromValue(__e.number)).toSeq,
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.grammatech.gtirb.proto.SymbolicExpression.SymAddrConst]]).map(com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.AddrConst(_))
            .orElse[com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.grammatech.gtirb.proto.SymbolicExpression.SymAddrAddr]]).map(com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.AddrAddr(_)))
            .getOrElse(com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SymbolicExpressionProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SymbolicExpressionProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.grammatech.gtirb.proto.SymbolicExpression.SymAddrConst
      case 3 => __out = com.grammatech.gtirb.proto.SymbolicExpression.SymAddrAddr
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag
    }
  }
  lazy val defaultInstance = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression(
    attributeFlags = _root_.scala.Seq.empty,
    value = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.Empty
  )
  sealed trait Value extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isAddrConst: _root_.scala.Boolean = false
    def isAddrAddr: _root_.scala.Boolean = false
    def addrConst: _root_.scala.Option[com.grammatech.gtirb.proto.SymbolicExpression.SymAddrConst] = _root_.scala.None
    def addrAddr: _root_.scala.Option[com.grammatech.gtirb.proto.SymbolicExpression.SymAddrAddr] = _root_.scala.None
  }
  object Value {
    @SerialVersionUID(0L)
    case object Empty extends com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class AddrConst(value: com.grammatech.gtirb.proto.SymbolicExpression.SymAddrConst) extends com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value {
      type ValueType = com.grammatech.gtirb.proto.SymbolicExpression.SymAddrConst
      override def isAddrConst: _root_.scala.Boolean = true
      override def addrConst: _root_.scala.Option[com.grammatech.gtirb.proto.SymbolicExpression.SymAddrConst] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class AddrAddr(value: com.grammatech.gtirb.proto.SymbolicExpression.SymAddrAddr) extends com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value {
      type ValueType = com.grammatech.gtirb.proto.SymbolicExpression.SymAddrAddr
      override def isAddrAddr: _root_.scala.Boolean = true
      override def addrAddr: _root_.scala.Option[com.grammatech.gtirb.proto.SymbolicExpression.SymAddrAddr] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class SymbolicExpressionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression](_l) {
    def addrConst: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.SymbolicExpression.SymAddrConst] = field(_.getAddrConst)((c_, f_) => c_.copy(value = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.AddrConst(f_)))
    def addrAddr: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.SymbolicExpression.SymAddrAddr] = field(_.getAddrAddr)((c_, f_) => c_.copy(value = com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value.AddrAddr(f_)))
    def attributeFlags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag]] = field(_.attributeFlags)((c_, f_) => c_.copy(attributeFlags = f_))
    def value: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val ADDR_CONST_FIELD_NUMBER = 2
  final val ADDR_ADDR_FIELD_NUMBER = 3
  final val ATTRIBUTE_FLAGS_FIELD_NUMBER = 4
  def of(
    value: com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression.Value,
    attributeFlags: _root_.scala.Seq[com.grammatech.gtirb.proto.SymbolicExpression.SEAttributeFlag]
  ): _root_.com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression = _root_.com.grammatech.gtirb.proto.SymbolicExpression.SymbolicExpression(
    value,
    attributeFlags
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[gtirb.proto.SymbolicExpression])
}
