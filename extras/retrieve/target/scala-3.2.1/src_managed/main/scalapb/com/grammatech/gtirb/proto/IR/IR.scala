// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.grammatech.gtirb.proto.IR

@SerialVersionUID(0L)
final case class IR(
    uuid: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    modules: _root_.scala.Seq[com.grammatech.gtirb.proto.Module.Module] = _root_.scala.Seq.empty,
    auxData: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData] = _root_.scala.collection.immutable.Map.empty,
    version: _root_.scala.Int = 0,
    cfg: _root_.scala.Option[com.grammatech.gtirb.proto.CFG.CFG] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[IR] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = uuid
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
        }
      };
      modules.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      auxData.foreach { __item =>
        val __value = com.grammatech.gtirb.proto.IR.IR._typemapper_auxData.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = version
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, __value)
        }
      };
      if (cfg.isDefined) {
        val __value = cfg.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = uuid
        if (!__v.isEmpty) {
          _output__.writeBytes(1, __v)
        }
      };
      modules.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      auxData.foreach { __v =>
        val __m = com.grammatech.gtirb.proto.IR.IR._typemapper_auxData.toBase(__v)
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = version
        if (__v != 0) {
          _output__.writeUInt32(6, __v)
        }
      };
      cfg.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withUuid(__v: _root_.com.google.protobuf.ByteString): IR = copy(uuid = __v)
    def clearModules = copy(modules = _root_.scala.Seq.empty)
    def addModules(__vs: com.grammatech.gtirb.proto.Module.Module *): IR = addAllModules(__vs)
    def addAllModules(__vs: Iterable[com.grammatech.gtirb.proto.Module.Module]): IR = copy(modules = modules ++ __vs)
    def withModules(__v: _root_.scala.Seq[com.grammatech.gtirb.proto.Module.Module]): IR = copy(modules = __v)
    def clearAuxData = copy(auxData = _root_.scala.collection.immutable.Map.empty)
    def addAuxData(__vs: (_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData) *): IR = addAllAuxData(__vs)
    def addAllAuxData(__vs: Iterable[(_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData)]): IR = copy(auxData = auxData ++ __vs)
    def withAuxData(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData]): IR = copy(auxData = __v)
    def withVersion(__v: _root_.scala.Int): IR = copy(version = __v)
    def getCfg: com.grammatech.gtirb.proto.CFG.CFG = cfg.getOrElse(com.grammatech.gtirb.proto.CFG.CFG.defaultInstance)
    def clearCfg: IR = copy(cfg = _root_.scala.None)
    def withCfg(__v: com.grammatech.gtirb.proto.CFG.CFG): IR = copy(cfg = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = uuid
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 3 => modules
        case 5 => auxData.iterator.map(com.grammatech.gtirb.proto.IR.IR._typemapper_auxData.toBase(_)).toSeq
        case 6 => {
          val __t = version
          if (__t != 0) __t else null
        }
        case 7 => cfg.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PByteString(uuid)
        case 3 => _root_.scalapb.descriptors.PRepeated(modules.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(auxData.iterator.map(com.grammatech.gtirb.proto.IR.IR._typemapper_auxData.toBase(_).toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PInt(version)
        case 7 => cfg.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.grammatech.gtirb.proto.IR.IR.type = com.grammatech.gtirb.proto.IR.IR
    // @@protoc_insertion_point(GeneratedMessage[gtirb.proto.IR])
}

object IR extends scalapb.GeneratedMessageCompanion[com.grammatech.gtirb.proto.IR.IR] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.grammatech.gtirb.proto.IR.IR] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.grammatech.gtirb.proto.IR.IR = {
    var __uuid: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    val __modules: _root_.scala.collection.immutable.VectorBuilder[com.grammatech.gtirb.proto.Module.Module] = new _root_.scala.collection.immutable.VectorBuilder[com.grammatech.gtirb.proto.Module.Module]
    val __auxData: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData]
    var __version: _root_.scala.Int = 0
    var __cfg: _root_.scala.Option[com.grammatech.gtirb.proto.CFG.CFG] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __uuid = _input__.readBytes()
        case 26 =>
          __modules += _root_.scalapb.LiteParser.readMessage[com.grammatech.gtirb.proto.Module.Module](_input__)
        case 42 =>
          __auxData += com.grammatech.gtirb.proto.IR.IR._typemapper_auxData.toCustom(_root_.scalapb.LiteParser.readMessage[com.grammatech.gtirb.proto.IR.IR.AuxDataEntry](_input__))
        case 48 =>
          __version = _input__.readUInt32()
        case 58 =>
          __cfg = Option(__cfg.fold(_root_.scalapb.LiteParser.readMessage[com.grammatech.gtirb.proto.CFG.CFG](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.grammatech.gtirb.proto.IR.IR(
        uuid = __uuid,
        modules = __modules.result(),
        auxData = __auxData.result(),
        version = __version,
        cfg = __cfg,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.grammatech.gtirb.proto.IR.IR] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.grammatech.gtirb.proto.IR.IR(
        uuid = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        modules = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[com.grammatech.gtirb.proto.Module.Module]]).getOrElse(_root_.scala.Seq.empty),
        auxData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[com.grammatech.gtirb.proto.IR.IR.AuxDataEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(com.grammatech.gtirb.proto.IR.IR._typemapper_auxData.toCustom(_)).toMap,
        version = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        cfg = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.grammatech.gtirb.proto.CFG.CFG]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = IRProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = IRProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = com.grammatech.gtirb.proto.Module.Module
      case 5 => __out = com.grammatech.gtirb.proto.IR.IR.AuxDataEntry
      case 7 => __out = com.grammatech.gtirb.proto.CFG.CFG
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.grammatech.gtirb.proto.IR.IR.AuxDataEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.grammatech.gtirb.proto.IR.IR(
    uuid = _root_.com.google.protobuf.ByteString.EMPTY,
    modules = _root_.scala.Seq.empty,
    auxData = _root_.scala.collection.immutable.Map.empty,
    version = 0,
    cfg = _root_.scala.None
  )
  @SerialVersionUID(0L)
  final case class AuxDataEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[com.grammatech.gtirb.proto.AuxData.AuxData] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AuxDataEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): AuxDataEntry = copy(key = __v)
      def getValue: com.grammatech.gtirb.proto.AuxData.AuxData = value.getOrElse(com.grammatech.gtirb.proto.AuxData.AuxData.defaultInstance)
      def clearValue: AuxDataEntry = copy(value = _root_.scala.None)
      def withValue(__v: com.grammatech.gtirb.proto.AuxData.AuxData): AuxDataEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: com.grammatech.gtirb.proto.IR.IR.AuxDataEntry.type = com.grammatech.gtirb.proto.IR.IR.AuxDataEntry
      // @@protoc_insertion_point(GeneratedMessage[gtirb.proto.IR.AuxDataEntry])
  }
  
  object AuxDataEntry extends scalapb.GeneratedMessageCompanion[com.grammatech.gtirb.proto.IR.IR.AuxDataEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.grammatech.gtirb.proto.IR.IR.AuxDataEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.grammatech.gtirb.proto.IR.IR.AuxDataEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[com.grammatech.gtirb.proto.AuxData.AuxData] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[com.grammatech.gtirb.proto.AuxData.AuxData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.grammatech.gtirb.proto.IR.IR.AuxDataEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.grammatech.gtirb.proto.IR.IR.AuxDataEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.grammatech.gtirb.proto.IR.IR.AuxDataEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.grammatech.gtirb.proto.AuxData.AuxData]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.grammatech.gtirb.proto.IR.IR.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.grammatech.gtirb.proto.IR.IR.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = com.grammatech.gtirb.proto.AuxData.AuxData
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.grammatech.gtirb.proto.IR.IR.AuxDataEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class AuxDataEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.IR.IR.AuxDataEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.grammatech.gtirb.proto.IR.IR.AuxDataEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.AuxData.AuxData] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.grammatech.gtirb.proto.AuxData.AuxData]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[com.grammatech.gtirb.proto.IR.IR.AuxDataEntry, (_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData)] =
      _root_.scalapb.TypeMapper[com.grammatech.gtirb.proto.IR.IR.AuxDataEntry, (_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData)](__m => (__m.key, __m.getValue))(__p => com.grammatech.gtirb.proto.IR.IR.AuxDataEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[com.grammatech.gtirb.proto.AuxData.AuxData]
    ): _root_.com.grammatech.gtirb.proto.IR.IR.AuxDataEntry = _root_.com.grammatech.gtirb.proto.IR.IR.AuxDataEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[gtirb.proto.IR.AuxDataEntry])
  }
  
  implicit class IRLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.IR.IR]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.grammatech.gtirb.proto.IR.IR](_l) {
    def uuid: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.uuid)((c_, f_) => c_.copy(uuid = f_))
    def modules: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.grammatech.gtirb.proto.Module.Module]] = field(_.modules)((c_, f_) => c_.copy(modules = f_))
    def auxData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData]] = field(_.auxData)((c_, f_) => c_.copy(auxData = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def cfg: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.CFG.CFG] = field(_.getCfg)((c_, f_) => c_.copy(cfg = Option(f_)))
    def optionalCfg: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.grammatech.gtirb.proto.CFG.CFG]] = field(_.cfg)((c_, f_) => c_.copy(cfg = f_))
  }
  final val UUID_FIELD_NUMBER = 1
  final val MODULES_FIELD_NUMBER = 3
  final val AUX_DATA_FIELD_NUMBER = 5
  final val VERSION_FIELD_NUMBER = 6
  final val CFG_FIELD_NUMBER = 7
  @transient
  private[IR] val _typemapper_auxData: _root_.scalapb.TypeMapper[com.grammatech.gtirb.proto.IR.IR.AuxDataEntry, (_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData)] = implicitly[_root_.scalapb.TypeMapper[com.grammatech.gtirb.proto.IR.IR.AuxDataEntry, (_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData)]]
  def of(
    uuid: _root_.com.google.protobuf.ByteString,
    modules: _root_.scala.Seq[com.grammatech.gtirb.proto.Module.Module],
    auxData: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, com.grammatech.gtirb.proto.AuxData.AuxData],
    version: _root_.scala.Int,
    cfg: _root_.scala.Option[com.grammatech.gtirb.proto.CFG.CFG]
  ): _root_.com.grammatech.gtirb.proto.IR.IR = _root_.com.grammatech.gtirb.proto.IR.IR(
    uuid,
    modules,
    auxData,
    version,
    cfg
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[gtirb.proto.IR])
}
