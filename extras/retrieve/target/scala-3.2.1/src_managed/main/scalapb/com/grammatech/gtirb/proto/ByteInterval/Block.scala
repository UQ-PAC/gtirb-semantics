// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.grammatech.gtirb.proto.ByteInterval

@SerialVersionUID(0L)
final case class Block(
    offset: _root_.scala.Long = 0L,
    value: com.grammatech.gtirb.proto.ByteInterval.Block.Value = com.grammatech.gtirb.proto.ByteInterval.Block.Value.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Block] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = offset
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      if (value.code.isDefined) {
        val __value = value.code.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.data.isDefined) {
        val __value = value.data.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = offset
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      value.code.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.data.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withOffset(__v: _root_.scala.Long): Block = copy(offset = __v)
    def getCode: com.grammatech.gtirb.proto.CodeBlock.CodeBlock = value.code.getOrElse(com.grammatech.gtirb.proto.CodeBlock.CodeBlock.defaultInstance)
    def withCode(__v: com.grammatech.gtirb.proto.CodeBlock.CodeBlock): Block = copy(value = com.grammatech.gtirb.proto.ByteInterval.Block.Value.Code(__v))
    def getData: com.grammatech.gtirb.proto.DataBlock.DataBlock = value.data.getOrElse(com.grammatech.gtirb.proto.DataBlock.DataBlock.defaultInstance)
    def withData(__v: com.grammatech.gtirb.proto.DataBlock.DataBlock): Block = copy(value = com.grammatech.gtirb.proto.ByteInterval.Block.Value.Data(__v))
    def clearValue: Block = copy(value = com.grammatech.gtirb.proto.ByteInterval.Block.Value.Empty)
    def withValue(__v: com.grammatech.gtirb.proto.ByteInterval.Block.Value): Block = copy(value = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = offset
          if (__t != 0L) __t else null
        }
        case 2 => value.code.orNull
        case 3 => value.data.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(offset)
        case 2 => value.code.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => value.data.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.grammatech.gtirb.proto.ByteInterval.Block.type = com.grammatech.gtirb.proto.ByteInterval.Block
    // @@protoc_insertion_point(GeneratedMessage[gtirb.proto.Block])
}

object Block extends scalapb.GeneratedMessageCompanion[com.grammatech.gtirb.proto.ByteInterval.Block] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.grammatech.gtirb.proto.ByteInterval.Block] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.grammatech.gtirb.proto.ByteInterval.Block = {
    var __offset: _root_.scala.Long = 0L
    var __value: com.grammatech.gtirb.proto.ByteInterval.Block.Value = com.grammatech.gtirb.proto.ByteInterval.Block.Value.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __offset = _input__.readUInt64()
        case 18 =>
          __value = com.grammatech.gtirb.proto.ByteInterval.Block.Value.Code(__value.code.fold(_root_.scalapb.LiteParser.readMessage[com.grammatech.gtirb.proto.CodeBlock.CodeBlock](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __value = com.grammatech.gtirb.proto.ByteInterval.Block.Value.Data(__value.data.fold(_root_.scalapb.LiteParser.readMessage[com.grammatech.gtirb.proto.DataBlock.DataBlock](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.grammatech.gtirb.proto.ByteInterval.Block(
        offset = __offset,
        value = __value,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.grammatech.gtirb.proto.ByteInterval.Block] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.grammatech.gtirb.proto.ByteInterval.Block(
        offset = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.grammatech.gtirb.proto.CodeBlock.CodeBlock]]).map(com.grammatech.gtirb.proto.ByteInterval.Block.Value.Code(_))
            .orElse[com.grammatech.gtirb.proto.ByteInterval.Block.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.grammatech.gtirb.proto.DataBlock.DataBlock]]).map(com.grammatech.gtirb.proto.ByteInterval.Block.Value.Data(_)))
            .getOrElse(com.grammatech.gtirb.proto.ByteInterval.Block.Value.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ByteIntervalProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ByteIntervalProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.grammatech.gtirb.proto.CodeBlock.CodeBlock
      case 3 => __out = com.grammatech.gtirb.proto.DataBlock.DataBlock
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.grammatech.gtirb.proto.ByteInterval.Block(
    offset = 0L,
    value = com.grammatech.gtirb.proto.ByteInterval.Block.Value.Empty
  )
  sealed trait Value extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isCode: _root_.scala.Boolean = false
    def isData: _root_.scala.Boolean = false
    def code: _root_.scala.Option[com.grammatech.gtirb.proto.CodeBlock.CodeBlock] = _root_.scala.None
    def data: _root_.scala.Option[com.grammatech.gtirb.proto.DataBlock.DataBlock] = _root_.scala.None
  }
  object Value {
    @SerialVersionUID(0L)
    case object Empty extends com.grammatech.gtirb.proto.ByteInterval.Block.Value {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Code(value: com.grammatech.gtirb.proto.CodeBlock.CodeBlock) extends com.grammatech.gtirb.proto.ByteInterval.Block.Value {
      type ValueType = com.grammatech.gtirb.proto.CodeBlock.CodeBlock
      override def isCode: _root_.scala.Boolean = true
      override def code: _root_.scala.Option[com.grammatech.gtirb.proto.CodeBlock.CodeBlock] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Data(value: com.grammatech.gtirb.proto.DataBlock.DataBlock) extends com.grammatech.gtirb.proto.ByteInterval.Block.Value {
      type ValueType = com.grammatech.gtirb.proto.DataBlock.DataBlock
      override def isData: _root_.scala.Boolean = true
      override def data: _root_.scala.Option[com.grammatech.gtirb.proto.DataBlock.DataBlock] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class BlockLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.ByteInterval.Block]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.grammatech.gtirb.proto.ByteInterval.Block](_l) {
    def offset: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.offset)((c_, f_) => c_.copy(offset = f_))
    def code: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.CodeBlock.CodeBlock] = field(_.getCode)((c_, f_) => c_.copy(value = com.grammatech.gtirb.proto.ByteInterval.Block.Value.Code(f_)))
    def data: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.DataBlock.DataBlock] = field(_.getData)((c_, f_) => c_.copy(value = com.grammatech.gtirb.proto.ByteInterval.Block.Value.Data(f_)))
    def value: _root_.scalapb.lenses.Lens[UpperPB, com.grammatech.gtirb.proto.ByteInterval.Block.Value] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val OFFSET_FIELD_NUMBER = 1
  final val CODE_FIELD_NUMBER = 2
  final val DATA_FIELD_NUMBER = 3
  def of(
    offset: _root_.scala.Long,
    value: com.grammatech.gtirb.proto.ByteInterval.Block.Value
  ): _root_.com.grammatech.gtirb.proto.ByteInterval.Block = _root_.com.grammatech.gtirb.proto.ByteInterval.Block(
    offset,
    value
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[gtirb.proto.Block])
}
